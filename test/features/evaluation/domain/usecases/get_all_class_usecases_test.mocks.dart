// Mocks generated by Mockito 5.4.2 from annotations
// in siakad_sma_al_fusha/test/features/evaluation/domain/usecases/get_all_class_usecases_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:dartz/dartz.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:siakad_sma_al_fusha/core/error/failures.dart' as _i5;
import 'package:siakad_sma_al_fusha/features/evaluation/domain/entities/score.dart'
    as _i7;
import 'package:siakad_sma_al_fusha/features/evaluation/domain/entities/student.dart'
    as _i6;
import 'package:siakad_sma_al_fusha/features/evaluation/domain/repositories/evaluation_repository.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [EvaluationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockEvaluationRepository extends _i1.Mock
    implements _i2.EvaluationRepository {
  @override
  _i3.Future<_i4.Either<_i5.Failure, _i6.Student>>? getStudentByClass(
          String? classId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStudentByClass,
          [classId],
        ),
        returnValueForMissingStub: null,
      ) as _i3.Future<_i4.Either<_i5.Failure, _i6.Student>>?);
  @override
  _i3.Future<_i4.Either<_i5.Failure, _i7.Score>>? postScore({
    required String? idUser,
    required String? lessonCode,
    required String? rph,
    required String? pts,
    required String? pat,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postScore,
          [],
          {
            #idUser: idUser,
            #lessonCode: lessonCode,
            #rph: rph,
            #pts: pts,
            #pat: pat,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i3.Future<_i4.Either<_i5.Failure, _i7.Score>>?);
}
